'use client';
import { useSearchParams } from 'next/navigation';
import { Input, Typography, Empty } from 'antd';
import bigTiawai2 from '@public/big-tiawai-2.svg';
import { PageTitle } from '@/components/common/page';
import { Test, TestType } from '@/types/test.type';
import { useGetTestsAnyoneQuery } from '@/services/test.service';
import { useSearch } from '@/lib/hooks/use-search';
import { TestFrame } from '@/components/test/test-ui';
import { Loading } from '@/components/common/loading';

const { Title } = Typography;

const testContent: Record<
    TestType,
    { title: string; description: string; vnName: string }
> = {
    [TestType.NATIONAL_TEST]: {
        title: 'Luy·ªán thi THPTQG ‚Äì √în ƒë√∫ng tr·ªçng t√¢m, ƒë·∫°t ƒëi·ªÉm cao! üéØüìö',
        description:
            'H·ªá th·ªëng ƒë·ªÅ thi chu·∫©n, c·∫≠p nh·∫≠t li√™n t·ª•c, gi·∫£i th√≠ch ƒë√°p √°n chi ti·∫øt. Luy·ªán t·∫≠p m·ªói ng√†y ƒë·ªÉ t·ª± tin b∆∞·ªõc v√†o k·ª≥ thi quan tr·ªçng! üöÄ‚ú®',
        vnName: 'THPTQG',
    },
    [TestType.TOEIC_LISTENING]: {
        title: 'Luy·ªán Listening ‚Äì Nghe t·ªët, hi·ªÉu nhanh, n·∫Øm ch·∫Øc ƒëi·ªÉm s·ªë! üéßüìñ ',
        description:
            'L√†m b√†i nghe s√°t ƒë·ªÅ thi th·∫≠t, c·∫£i thi·ªán k·ªπ nƒÉng b·∫Øt keywords, luy·ªán ph·∫£n x·∫° v√† l√†m quen v·ªõi m·ªçi d·∫°ng c√¢u h·ªèi! üöÄüìö',
        vnName: 'Listening',
    },
    [TestType.TOEIC_READING]: {
        title: 'Luy·ªán Reading ‚Äì ƒê·ªçc hi·ªÉu s√¢u, n·∫Øm ch·∫Øc ƒë√°p √°n! üìñ‚ú®',
        description:
            'R√®n k·ªπ nƒÉng ƒë·ªçc hi·ªÉu v·ªõi b√†i t·∫≠p chu·∫©n TOEIC, c·∫£i thi·ªán t·ª´ v·ª±ng & t·ªëc ƒë·ªô l√†m b√†i, k√®m ph√¢n t√≠ch chi ti·∫øt ƒë·ªÉ t·ªëi ∆∞u ƒëi·ªÉm s·ªë! üöÄüìö',
        vnName: 'Reading',
    },
    [TestType.ASSIGNMENT]: {
        title: '',
        description: '',
        vnName: 'B√†i t·∫≠p',
    },
};

export default function TestPage() {
    const params = useSearchParams();
    const type = (params.get('type') as TestType) || TestType.NATIONAL_TEST;
    const { data: tests, isLoading } = useGetTestsAnyoneQuery(type);

    const searchFn = (test: Test, query: string) => {
        const value = query.toLowerCase();
        return (
            test.title?.toLowerCase().includes(value) ||
            test.type?.toLowerCase().includes(value) ||
            new Date(test.startDate).toLocaleDateString().includes(query) ||
            new Date(test.endDate).toLocaleDateString().includes(query) ||
            test.totalQuestions?.toString().includes(query) ||
            test.timeLength?.toString().includes(query) ||
            (test.isGenerated ? 'C√≥' : 'Kh√¥ng').includes(query)
        );
    };

    const { searchText, filteredData, handleSearch } = useSearch<Test>(
        tests || [],
        searchFn,
    );

    return (
        <div className="space-y-8">
            <PageTitle
                title={testContent[type].title}
                description={testContent[type].description}
                imageSrc={bigTiawai2}
                imageAlt="big tiawai 2"
                imagePosition="right"
            />

            <Title level={2} className="!font-roboto">
                Kho ƒë·ªÅ thi {testContent[type].vnName}
            </Title>

            <div className="flex-[1] space-y-4">
                <Input.Search
                    placeholder="T√¨m ki·∫øm ƒë·ªÅ thi..."
                    onSearch={(value) => handleSearch(value)}
                    onChange={(e) => handleSearch(e.target.value)}
                    value={searchText}
                    allowClear
                    size="large"
                />
            </div>
            {isLoading ? (
                <Loading />
            ) : filteredData.length > 0 ? (
                <div className="grid flex-[4] auto-rows-min grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                    {filteredData.map((test, index) => (
                        <TestFrame
                            key={index}
                            theme={
                                type === TestType.TOEIC_LISTENING
                                    ? 'blue'
                                    : 'pink'
                            }
                            test={test}
                        />
                    ))}
                </div>
            ) : (
                <div className="flex flex-[4] items-center justify-center">
                    <Empty description="Kh√¥ng t√¨m th·∫•y ƒë·ªÅ thi ph√π h·ª£p" />
                </div>
            )}
        </div>
    );
}
